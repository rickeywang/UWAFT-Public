/**
 * pageinit handlers for application sub-pages. Adds a data-initialized="true"
 * attribute once the JQM pageinit event has fired for that page.
 */
$(document).delegate('div[data-role="page"]', 'pageinit', function(ele) {
	console.log('pageinit', ele);
	$(ele.target).attr('data-initialized', 'true');
});

/**
 * Invokes the specified page control initialization function if the page has been initialized,
 * or waits for the page to be initialized before invoking the control initialization function.
 * @param pageId {String} The application sub-page ID value.
 * @param initFunction {Function} The control initialization function.
 */
function deferInitialization(pageId, initFunction) {
	var initClosure = function() {
		try {
			initFunction();
		} catch(ex) {
			console.error('Error initializing controls for page ID: ' + pageId);
		} finally {
			delete initClosure;
		}
	};

	if ($(pageId).attr('data-initialized') === 'true') {
		initClosure();
	} else {
		$(document).delegate(pageId, 'pageinit', initClosure);
	}
};

/**
 * The application identifier. Used by application.event to determine
 * target of navigator events.  This should correspond to the id in this apps config.xml
 * and, more importantly, the id in the navigator's tab list.
 */
var applicationName = 'GrnPhev';
var themerApplicationName = "GRNPHEV";
// Define application name for the themer

/**
 * Document ready funciton handler. Initializes the QnxCar framework,
 * the Apps Core framework object for navigator events, and fetches
 * the application profile setting.
 *
 */
window.addEventListener("load", function(e) {
	document.addEventListener("webworksready", ready);

}, false);

/**
 * webworksready event handler.
 */
function ready() {
	qnx.application.event.register(applicationName);

	blackberry.event.addEventListener("reselect", onAppEvent);
	blackberry.event.addEventListener("sensorsupdate", onSpeedChange);

	//Start ClimateControl
	initClimateControl();

	// Fire the event handler for speed
	onSpeedChange(qnx.sensors.get(["speed"]));

	// Initialize settings API, and get the current profile for this app
	var settingsData = qnx.settings.get();

	var currentProfile = settingsData['carControl_profile'];
	if (currentProfile != undefined) {
		$('body').attr('data-currentProfile', currentProfile);
	} else {
		console.warn('Car control profile undefined!');
	}

	// Defer the control initialization functions for the application pages.
	// This will initialize controls immediately if the page's pageinit event
	// has already fired, or waits for the pageinit event to occur before
	// invoking the control initialization function.
	deferInitialization('#hvac', initClimateControl);
	//deferInitialization('#virtualMechanic', initVirtualMechanics);
	//deferInitialization('#audioControl', initAudioControl);
	//
	//Personalization Removed for Ripple release
	//
	//deferInitialization('#personalization', initPersonalization);

	// Prevent layerX and layerY events from firing as they're deprecated in webkit
	// and cause thousands of warnings to be logged
	// remove layerX and layerY
	var all = $.event.props, len = all.length, res = [];
	while (len--) {
		var el = all[len];
		if (el != 'layerX' && el != 'layerY')
			res.push(el);
	}
	$.event.props = res;
}

/**
 * Navigator application event handler.  Triggered by "reselect" event.
 */
function onAppEvent(event) {
	showHome();
}

/**
 * Speed sensor event handler. Disables any controls that should not be
 * available when the vehicle is in motion
 */
var isDriving = false;
function onSpeedChange(event) {
	// Does the event data contain the speed attribute
	if (event && typeof event.speed === "number") {
		// If the speed (anything over 0) does not correspond to the isDriving boolean
		if ((event.speed > 0 && !isDriving) || (event.speed <= 0 && isDriving)) {
			// Is the speed greater than 0
			if (event.speed > 0) {
				isDriving = true;
			} else {
				isDriving = false;
			}

			// Update all the elements on the UI to be either disabled or enabled
			$("[data-monitor-driving]").each(function() {
				if (isDriving) {
					$(this).addClass("disabled").append('<div class="delinker"></div>');
				} else {
					$(this).removeClass("disabled").children(".delinker").remove();
				}
			});

			// If user is currently on a restricted page do to driving status, change page view back to home
			if (isDriving) {
				if ($.mobile.activePage.attr("id") === "personalization") {
					showHome();
				}
			}
		}
	}
}

/**
 * Shows the home index.
 */
function showHome() {
	$.mobile.changePage($('#home'), {
		transition : 'none'
	});

	// Close dialogs in virtual mechanic
	hideDialog($('.dialog'));
}

